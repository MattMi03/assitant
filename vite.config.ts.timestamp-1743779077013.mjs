// vite.config.ts
import { defineConfig } from "file:///Users/hexiangshuai/Documents/project/biaoben/lumos/myproject/node_modules/vite/dist/node/index.js";
import vue from "file:///Users/hexiangshuai/Documents/project/biaoben/lumos/myproject/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "file:///Users/hexiangshuai/Documents/project/biaoben/lumos/myproject/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import legacy from "file:///Users/hexiangshuai/Documents/project/biaoben/lumos/myproject/node_modules/@vitejs/plugin-legacy/dist/index.mjs";
import { resolve } from "path";
import Components from "file:///Users/hexiangshuai/Documents/project/biaoben/lumos/myproject/node_modules/unplugin-vue-components/dist/vite.mjs";
import { AntDesignVueResolver } from "file:///Users/hexiangshuai/Documents/project/biaoben/lumos/myproject/node_modules/unplugin-vue-components/dist/resolvers.mjs";
import PurgeIcons from "file:///Users/hexiangshuai/Documents/project/biaoben/lumos/myproject/node_modules/vite-plugin-purge-icons/dist/index.mjs";
var vite_config_default = defineConfig({
  resolve: {
    alias: [
      {
        find: /@\//,
        replacement: resolve(process.cwd(), ".", "src") + "/"
      }
    ]
  },
  plugins: [
    vue(),
    vueJsx(),
    legacy(),
    Components({
      dts: true,
      dirs: ["src/components"],
      resolvers: [
        AntDesignVueResolver({
          importStyle: false,
          resolveIcons: true
        })
      ]
    }),
    PurgeIcons()
  ],
  css: {
    preprocessorOptions: {
      less: {
        javascriptEnabled: true
      }
    }
  },
  build: {
    target: "es2015",
    chunkSizeWarningLimit: 1024
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvaGV4aWFuZ3NodWFpL0RvY3VtZW50cy9wcm9qZWN0L2JpYW9iZW4vbHVtb3MvbXlwcm9qZWN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvaGV4aWFuZ3NodWFpL0RvY3VtZW50cy9wcm9qZWN0L2JpYW9iZW4vbHVtb3MvbXlwcm9qZWN0L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9oZXhpYW5nc2h1YWkvRG9jdW1lbnRzL3Byb2plY3QvYmlhb2Jlbi9sdW1vcy9teXByb2plY3Qvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJztcclxuaW1wb3J0IHZ1ZSBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUnO1xyXG5pbXBvcnQgdnVlSnN4IGZyb20gJ0B2aXRlanMvcGx1Z2luLXZ1ZS1qc3gnO1xyXG5pbXBvcnQgbGVnYWN5IGZyb20gJ0B2aXRlanMvcGx1Z2luLWxlZ2FjeSc7XHJcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJztcclxuXHJcbmltcG9ydCBDb21wb25lbnRzIGZyb20gJ3VucGx1Z2luLXZ1ZS1jb21wb25lbnRzL3ZpdGUnO1xyXG5pbXBvcnQgeyBBbnREZXNpZ25WdWVSZXNvbHZlciB9IGZyb20gJ3VucGx1Z2luLXZ1ZS1jb21wb25lbnRzL3Jlc29sdmVycyc7XHJcbmltcG9ydCBQdXJnZUljb25zIGZyb20gJ3ZpdGUtcGx1Z2luLXB1cmdlLWljb25zJztcclxuXHJcbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcblx0cmVzb2x2ZToge1xyXG5cdFx0YWxpYXM6IFtcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZpbmQ6IC9AXFwvLyxcclxuXHRcdFx0XHRyZXBsYWNlbWVudDogcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnLicsICdzcmMnKSArICcvJ1xyXG5cdFx0XHR9XHJcblx0XHRdXHJcblx0fSxcclxuXHRwbHVnaW5zOiBbXHJcblx0XHR2dWUoKSxcclxuXHRcdHZ1ZUpzeCgpLFxyXG5cdFx0Ly8gXHU2M0QwXHU0RjlCXHU0RjIwXHU3RURGXHU2RDRGXHU4OUM4XHU1NjY4XHU1MTdDXHU1QkI5XHU2MDI3XHU2NTJGXHU2MzAxXHVGRjBDXHU2Q0U4XHU2MTBGXHU3NTMxXHU0RThFdnVlM1x1NjcyQ1x1OEVBQlx1NEUwRFx1NTcyOFx1NjUyRlx1NjMwMWllMTFcdTUzQ0FcdTRFRTVcdTRFMEJcdTcyNDhcdTY3MkNcdUZGMENcdTYyNDBcdTRFRTVcdTUyQTBcdTRFODZcdThGRDlcdTRFMkFcdTRFNUZcdTRFMERcdTgwRkRcdTU3MjhpZTExXHU0RTJEXHU4RkQwXHU4ODRDdnVlM1x1OTg3OVx1NzZFRVxyXG5cdFx0bGVnYWN5KCksXHJcblx0XHRDb21wb25lbnRzKHtcclxuXHRcdFx0ZHRzOiB0cnVlLCAvL3RzXHU2NTJGXHU2MzAxXHJcblx0XHRcdGRpcnM6IFsnc3JjL2NvbXBvbmVudHMnXSwgLy8gXHU5MTREXHU3RjZFXHU5NzAwXHU4OTgxXHU5RUQ4XHU4QkE0XHU1QkZDXHU1MTY1XHU3Njg0XHU4MUVBXHU1QjlBXHU0RTQ5XHU3RUM0XHU0RUY2XHU2NTg3XHU0RUY2XHU1OTM5XHVGRjBDXHU4QkU1XHU2NTg3XHU0RUY2XHU1OTM5XHU0RTBCXHU3Njg0XHU2MjQwXHU2NzA5XHU3RUM0XHU0RUY2XHU5MEZEXHU0RjFBXHU4MUVBXHU1MkE4IGltcG9ydFxyXG5cdFx0XHRyZXNvbHZlcnM6IFtcclxuXHRcdFx0XHRBbnREZXNpZ25WdWVSZXNvbHZlcih7XHJcblx0XHRcdFx0XHRpbXBvcnRTdHlsZTogZmFsc2UsIC8vIFx1NjYyRlx1NTQyNlx1OTcwMFx1ODk4MVx1ODFFQVx1NTJBOFx1OTY4Rlx1NUYxNVx1NTE2NVx1NTJBMFx1OEY3RFx1NUJGOVx1NUU5NFx1NzY4NFx1N0VDNFx1NEVGNlx1NjgzN1x1NUYwRlx1RkYwQ1x1Nzk4MVx1NzUyOFx1RkYwQ1x1NTZFMFx1NEUzQVx1NjdEMFx1NEU5Qlx1NEU4Q1x1N0VBN1x1N0VDNFx1NEVGNlx1RkYwOFx1NkJENFx1NTk4MiBEYXRlUmFuZ2VQaWNrZXJcdUZGMDlcdTZDQTFcdTUyOUVcdTZDRDVcdTUxQzZcdTc4NkVcdTU3MzBcdThCQzZcdTUyMkJcdTZCNjNcdTc4NkVcdThERUZcdTVGODRcdUZGMENcdTYyNEJcdTUyQThcdTVGMTVcdTUxNjVcdTUxNjhcdTVDNDBcdTY4MzdcdTVGMEZcclxuXHRcdFx0XHRcdHJlc29sdmVJY29uczogdHJ1ZSAvLyBcdTUzRUZcdTRGN0ZcdTc1MjhAYW50LWRlc2lnbi9pY29ucy12dWVcdTU2RkVcdTY4MDdcdTVFOTNcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRdXHJcblx0XHR9KSxcclxuXHRcdFB1cmdlSWNvbnMoKSAvLyBcdTY1MkZcdTYzMDFcdTRGN0ZcdTc1MjhJY29uaWZ5XHU0RTJEXHU2MjQwXHU2NzA5XHU3Njg0XHU1NkZFXHU2ODA3XHJcblx0XSxcclxuXHRjc3M6IHtcclxuXHRcdHByZXByb2Nlc3Nvck9wdGlvbnM6IHtcclxuXHRcdFx0bGVzczoge1xyXG5cdFx0XHRcdGphdmFzY3JpcHRFbmFibGVkOiB0cnVlIC8vIFx1NUZDNVx1OTg3Qlx1NUYwMFx1NTQyRlx1RkYwQ1x1NEUwRFx1NzEzNmFudFx1NzY4NFx1NjgzN1x1NUYwRlx1NUU5M1x1NUYxNVx1NTE2NVx1NjVGNlx1NEYxQVx1NjJBNVx1OTUxOVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHRidWlsZDoge1xyXG5cdFx0dGFyZ2V0OiAnZXMyMDE1JyxcclxuXHRcdGNodW5rU2l6ZVdhcm5pbmdMaW1pdDogMTAyNFxyXG5cdH1cclxufSk7XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBeVcsU0FBUyxvQkFBb0I7QUFDdFksT0FBTyxTQUFTO0FBQ2hCLE9BQU8sWUFBWTtBQUNuQixPQUFPLFlBQVk7QUFDbkIsU0FBUyxlQUFlO0FBRXhCLE9BQU8sZ0JBQWdCO0FBQ3ZCLFNBQVMsNEJBQTRCO0FBQ3JDLE9BQU8sZ0JBQWdCO0FBR3ZCLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzNCLFNBQVM7QUFBQSxJQUNSLE9BQU87QUFBQSxNQUNOO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixhQUFhLFFBQVEsUUFBUSxJQUFJLEdBQUcsS0FBSyxLQUFLLElBQUk7QUFBQSxNQUNuRDtBQUFBLElBQ0Q7QUFBQSxFQUNEO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUixJQUFJO0FBQUEsSUFDSixPQUFPO0FBQUEsSUFFUCxPQUFPO0FBQUEsSUFDUCxXQUFXO0FBQUEsTUFDVixLQUFLO0FBQUEsTUFDTCxNQUFNLENBQUMsZ0JBQWdCO0FBQUEsTUFDdkIsV0FBVztBQUFBLFFBQ1YscUJBQXFCO0FBQUEsVUFDcEIsYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFFBQ2YsQ0FBQztBQUFBLE1BQ0Y7QUFBQSxJQUNELENBQUM7QUFBQSxJQUNELFdBQVc7QUFBQSxFQUNaO0FBQUEsRUFDQSxLQUFLO0FBQUEsSUFDSixxQkFBcUI7QUFBQSxNQUNwQixNQUFNO0FBQUEsUUFDTCxtQkFBbUI7QUFBQSxNQUNwQjtBQUFBLElBQ0Q7QUFBQSxFQUNEO0FBQUEsRUFDQSxPQUFPO0FBQUEsSUFDTixRQUFRO0FBQUEsSUFDUix1QkFBdUI7QUFBQSxFQUN4QjtBQUNELENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
